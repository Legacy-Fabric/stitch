plugins {
	id "java"
	id "java-library"
	id "maven-publish"
	id "net.minecrell.licenser" version "0.4.1"
}

sourceCompatibility = 1.8

def ENV = System.getenv()
version = "0.6.3" + (ENV.GITHUB_ACTIONS ? "" : "+local")

group = 'net.legacyfabric'
archivesBaseName = project.name.toLowerCase()

repositories {
	mavenCentral()
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
}

configurations {
	ship
	enigma
	implementation.extendsFrom ship
	compileOnly.extendsFrom enigma
	testImplementation.extendsFrom enigma
}

dependencies {
	ship 'org.ow2.asm:asm:9.1'
	ship 'org.ow2.asm:asm-commons:9.1'
	ship 'org.ow2.asm:asm-tree:9.1'
	ship 'org.ow2.asm:asm-util:9.1'
	ship 'net.fabricmc:tiny-mappings-parser:0.3.0+build.17'
	implementation 'com.google.guava:guava:28.0-jre'
	compileOnly 'org.jetbrains:annotations:20.1.0'

	enigma 'cuchaz:enigma:0.23.2'

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
}

license {
	header project.file("HEADER")
	include "**/*.java"
}

jar {
	manifest {
		attributes 'Implementation-Title': 'Stitch',
				'Implementation-Version': archiveVersion,
				'Main-Class': "net.fabricmc.stitch.Main"
	}
}

task allJar(type: Jar) {
	from {
		configurations.ship.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
	manifest {
		attributes 'Implementation-Title': 'Stitch',
				'Implementation-Version': archiveVersion,
				'Main-Class': "net.fabricmc.stitch.Main"
	}
	archiveClassifier = 'all'
	with jar
}

java {
	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact(allJar)
		}
	}

	// select the repositories you want to publish to
	repositories {
		if (ENV.MAVEN_PUBLISH_TOKEN) {
			repositories.maven {
				url 'https://maven.legacyfabric.net/'
				credentials {
					username 'legacyfabric-ci'
					password ENV.MAVEN_PUBLISH_TOKEN
				}
				authentication {
					basic(BasicAuthentication)
				}
			}
		}
	}
}

test {
	useJUnitPlatform()
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def url = new URL("https://maven.legacyfabric.net/net/legacyfabric/stitch/maven-metadata.xml")
		if (url != null) {
			def xml = url.text
			if (xml != null && !xml.isEmpty()) {
				def metadata = new XmlSlurper().parseText(xml)
				def versions = metadata.versioning.versions.version*.text();
				if (versions.contains(version)) {
					throw new RuntimeException("${version} has already been released!")
				}
			}
		}
	}
}

publish.mustRunAfter checkVersion
